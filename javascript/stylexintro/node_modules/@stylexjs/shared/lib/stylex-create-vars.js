"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = styleXCreateVars;
var _hash = _interopRequireDefault(require("./hash"));
var _objectUtils = require("./utils/object-utils");
var _defaultOptions = require("./utils/default-options");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function styleXCreateVars(variables, options) {
  const {
    classNamePrefix,
    themeName
  } = {
    ..._defaultOptions.defaultOptions,
    ...options
  };
  const themeNameHash = classNamePrefix + (0, _hash.default)(themeName);
  const variablesMap = (0, _objectUtils.objMap)(variables, (value, key) => {
    const nameHash = classNamePrefix + (0, _hash.default)(`${themeName}.${key}`);
    return {
      nameHash,
      value
    };
  });
  const themeVariablesObject = (0, _objectUtils.objMap)(variablesMap, _ref => {
    let {
      nameHash
    } = _ref;
    return `var(--${nameHash})`;
  });
  const cssVariablesString = constructCssVariablesString(variablesMap);
  return [{
    ...themeVariablesObject,
    __themeName__: themeNameHash
  }, {
    css: cssVariablesString
  }];
}
function constructCssVariablesString(variables) {
  const atRules = {};
  const varsString = (0, _objectUtils.objEntries)(variables).map(_ref2 => {
    let [key, {
      nameHash,
      value
    }] = _ref2;
    if (value !== null && typeof value === "object") {
      if (value.default === undefined) {
        throw new Error("Default value is not defined for " + key + " variable.");
      }
      const definedVarString = `--${nameHash}:${value.default};`;
      Object.keys(value).forEach(key => {
        if (key.startsWith("@")) {
          const definedVarStringForAtRule = `--${nameHash}:${value[key]};`;
          if (atRules[key] == null) {
            atRules[key] = [definedVarStringForAtRule];
          } else {
            atRules[key].push(definedVarStringForAtRule);
          }
        }
      });
      return definedVarString;
    }
    return `--${nameHash}:${value};`;
  }).join("");
  const atRulesString = (0, _objectUtils.objEntries)(atRules).map(_ref3 => {
    let [atRule, varsArr] = _ref3;
    return `${atRule}{:root{${varsArr.join("")}}}`;
  }).join("");
  return `:root{${varsString}}${atRulesString || ""}`;
}