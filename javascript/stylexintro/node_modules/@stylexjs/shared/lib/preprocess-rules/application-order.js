"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _splitCssValue = _interopRequireDefault(require("../utils/split-css-value"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const shorthands = {
  all: _ => {
    throw new Error("all is not supported");
  },
  animation: value => [["animation", value], ["animationName", null], ["animationDuration", null], ["animationTimingFunction", null], ["animationDelay", null], ["animationIterationCount", null], ["animationDirection", null], ["animationFillMode", null], ["animationPlayState", null]],
  background: value => [["background", value], ["backgroundAttachment", null], ["backgroundClip", null], ["backgroundColor", null], ["backgroundImage", null], ["backgroundOrigin", null], ["backgroundPosition", null], ["backgroundRepeat", null], ["backgroundSize", null]],
  border: rawValue => {
    if (typeof rawValue === "number") {
      return shorthands.borderWidth(rawValue);
    }
    const [width, style, color] = (0, _splitCssValue.default)(rawValue);
    return [...shorthands.borderWidth(width), ...shorthands.borderStyle(style), ...shorthands.borderColor(color)];
  },
  borderInline: rawValue => {
    if (typeof rawValue === "number") {
      return [["borderInlineWidth", rawValue], ["borderInlineStartWidth", null], ["borderInlineEndWidth", null]];
    }
    const [width, style, color] = (0, _splitCssValue.default)(rawValue);
    return [...shorthands.borderInlineWidth(width), ...shorthands.borderInlineStyle(style), ...shorthands.borderInlineColor(color)];
  },
  borderBlock: rawValue => {
    if (typeof rawValue === "number") {
      return [["borderBlockWidth", rawValue], ["borderTopWidth", null], ["borderBottomWidth", null]];
    }
    const [width, style, color] = (0, _splitCssValue.default)(rawValue);
    return [...shorthands.borderBlockWidth(width), ...shorthands.borderBlockStyle(style), ...shorthands.borderBlockColor(color)];
  },
  borderTop: rawValue => {
    if (typeof rawValue === "number") {
      return [["borderTopWidth", rawValue]];
    }
    const [width, style, color] = (0, _splitCssValue.default)(rawValue);
    return [["borderTopWidth", width], ["borderTopStyle", style], ["borderTopColor", color]];
  },
  borderInlineEnd: rawValue => {
    if (typeof rawValue === "number") {
      return [["borderInlineEndWidth", rawValue]];
    }
    const [width, style, color] = (0, _splitCssValue.default)(rawValue);
    return [["borderInlineEndWidth", width], ["borderInlineEndStyle", style], ["borderInlineEndColor", color]];
  },
  borderRight: _rawValue => {
    throw new Error(["`borderRight` is not supported.", "You could use `borderRightWidth`, `borderRightStyle` and `borderRightColor`,", "but it is preferable to use `borderInlineEndWidth`, `borderInlineEndStyle` and `borderInlineEndColor`."].join(" "));
  },
  borderBottom: rawValue => {
    if (typeof rawValue === "number") {
      return [["borderBottomWidth", rawValue]];
    }
    const [width, style, color] = (0, _splitCssValue.default)(rawValue);
    return [["borderBottomWidth", width], ["borderBottomStyle", style], ["borderBottomColor", color]];
  },
  borderInlineStart: rawValue => {
    if (typeof rawValue === "number") {
      return [["borderInlineStartWidth", rawValue]];
    }
    const [width, style, color] = (0, _splitCssValue.default)(rawValue);
    return [["borderInlineStartWidth", width], ["borderInlineStartStyle", style], ["borderInlineStartColor", color]];
  },
  borderLeft: _rawValue => {
    throw new Error(["`borderLeft` is not supported.", "You could use `borderLeftWidth`, `borderLeftStyle` and `borderLeftColor`,", "but it is preferable to use `borderInlineStartWidth`, `borderInlineStartStyle` and `borderInlineStartColor`."].join(" "));
  },
  borderInlineWidth: rawValue => [["borderInlineWidth", rawValue], ["borderInlineStartWidth", null], ["borderLeftWidth", null], ["borderInlineEndWidth", null], ["borderRightWidth", null]],
  borderInlineStyle: rawValue => [["borderInlineStyle", rawValue], ["borderInlineStartStyle", null], ["borderLeftStyle", null], ["borderInlineEndStyle", null], ["borderRightStyle", null]],
  borderInlineColor: rawValue => [["borderInlineColor", rawValue], ["borderInlineStartColor", null], ["borderLeftColor", null], ["borderInlineEndColor", null], ["borderRightColor", null]],
  borderBlockWidth: rawValue => [["borderBlockWidth", rawValue], ["borderTopWidth", null], ["borderBottomWidth", null]],
  borderBlockStyle: rawValue => [["borderBlockStyle", rawValue], ["borderTopStyle", null], ["borderBottomStyle", null]],
  borderBlockColor: rawValue => [["borderBlockColor", rawValue], ["borderTopColor", null], ["borderBottomColor", null]],
  borderColor: value => [["borderColor", value], ["borderTopColor", null], ["borderInlineEndColor", null], ["borderRightColor", null], ["borderBottomColor", null], ["borderInlineStartColor", null], ["borderLeftColor", null]],
  borderStyle: value => [["borderStyle", value], ["borderTopStyle", null], ["borderInlineEndStyle", null], ["borderRightStyle", null], ["borderBottomStyle", null], ["borderInlineStartStyle", null], ["borderLeftStyle", null]],
  borderWidth: value => [["borderWidth", value], ["borderTopWidth", null], ["borderInlineEndWidth", null], ["borderRightWidth", null], ["borderBottomWidth", null], ["borderInlineStartWidth", null], ["borderLeftWidth", null]],
  borderInlineStartColor: value => [["borderInlineStartColor", value], ["borderLeftColor", null], ["borderRightColor", null]],
  borderInlineEndColor: value => [["borderInlineEndColor", value], ["borderLeftColor", null], ["borderRightColor", null]],
  borderInlineStartStyle: value => [["borderInlineStartStyle", value], ["borderLeftStyle", null], ["borderRightStyle", null]],
  borderInlineEndStyle: value => [["borderInlineEndStyle", value], ["borderLeftStyle", null], ["borderRightStyle", null]],
  borderInlineStartWidth: value => [["borderInlineStartWidth", value], ["borderLeftWidth", null], ["borderRightWidth", null]],
  borderInlineEndWidth: value => [["borderInlineEndWidth", value], ["borderLeftWidth", null], ["borderRightWidth", null]],
  borderLeftColor: value => [["borderLeftColor", value], ["borderInlineStartColor", null], ["borderInlineEndColor", null]],
  borderRightColor: value => [["borderRightColor", value], ["borderInlineStartColor", null], ["borderInlineEndColor", null]],
  borderLeftStyle: value => [["borderLeftStyle", value], ["borderInlineStartStyle", null], ["borderInlineEndStyle", null]],
  borderRightStyle: value => [["borderRightStyle", value], ["borderInlineStartStyle", null], ["borderInlineEndStyle", null]],
  borderLeftWidth: value => [["borderLeftWidth", value], ["borderInlineStartWidth", null], ["borderInlineEndWidth", null]],
  borderRightWidth: value => [["borderRightWidth", value], ["borderInlineStartWidth", null], ["borderInlineEndWidth", null]],
  borderRadius: value => {
    const values = typeof value === "number" ? [value] : (0, _splitCssValue.default)(value);
    if (values.length === 1) {
      return [["borderRadius", value], ["borderStartStartRadius", null], ["borderStartEndRadius", null], ["borderEndStartRadius", null], ["borderEndEndRadius", null], ["borderTopLeftRadius", null], ["borderTopRightRadius", null], ["borderBottomLeftRadius", null], ["borderBottomRightRadius", null]];
    }
    const [startStart, startEnd = startStart, endEnd = startStart, endStart = startEnd] = values;
    return [["borderStartStartRadius", startStart], ["borderStartEndRadius", startEnd], ["borderEndEndRadius", endEnd], ["borderEndStartRadius", endStart], ["borderTopLeftRadius", null], ["borderTopRightRadius", null], ["borderBottomLeftRadius", null], ["borderBottomRightRadius", null]];
  },
  borderStartStartRadius: value => [["borderStartStartRadius", value], ["borderTopLeftRadius", null], ["borderTopRightRadius", null]],
  borderStartEndRadius: value => [["borderStartEndRadius", value], ["borderTopLeftRadius", null], ["borderTopRightRadius", null]],
  borderEndStartRadius: value => [["borderEndStartRadius", value], ["borderBottomLeftRadius", null], ["borderBottomRightRadius", null]],
  borderEndEndRadius: value => [["borderEndEndRadius", value], ["borderBottomLeftRadius", null], ["borderBottomRightRadius", null]],
  borderTopLeftRadius: value => [["borderTopLeftRadius", value], ["borderStartStartRadius", null], ["borderStartEndRadius", null]],
  borderTopRightRadius: value => [["borderTopRightRadius", value], ["borderStartStartRadius", null], ["borderStartEndRadius", null]],
  borderBottomLeftRadius: value => [["borderBottomLeftRadius", value], ["borderEndStartRadius", null], ["borderEndEndRadius", null]],
  borderBottomRightRadius: value => [["borderBottomRightRadius", value], ["borderEndStartRadius", null], ["borderEndEndRadius", null]],
  columnRule: value => [["columnRule", value], ["columnRuleWidth", null], ["columnRuleStyle", null], ["columnRuleColor", null]],
  columns: value => [["columns", value], ["columnCount", null], ["columnWidth", null]],
  container: value => [["container", value], ["containerName", null], ["containerType", null]],
  flex: value => [["flex", value], ["flexGrow", null], ["flexShrink", null], ["flexBasis", null]],
  flexFlow: value => [["flexFlow", value], ["flexDirection", null], ["flexWrap", null]],
  font: value => [["font", value], ["fontFamily", null], ["fontSize", null], ["fontStretch", null], ["fontStyle", null], ["fontVariant", null], ["fontWeight", null], ["lineHeight", null]],
  gap: value => [["gap", value], ["rowGap", null], ["columnGap", null]],
  grid: value => [["grid", value], ["gridTemplate", null], ["gridTemplateAreas", null], ["gridTemplateColumns", null], ["gridTemplateRows", null], ["gridAutoRows", null], ["gridAutoColumns", null], ["gridAutoFlow", null]],
  gridArea: value => [["gridArea", value], ["gridRow", null], ["gridRowStart", null], ["gridRowEnd", null], ["gridColumn", null], ["gridColumnStart", null], ["gridColumnEnd", null]],
  gridRow: value => [["gridRow", value], ["gridRowStart", null], ["gridRowEnd", null]],
  gridColumn: value => [["gridColumn", value], ["gridColumnStart", null], ["gridColumnEnd", null]],
  gridTemplate: value => [["gridTemplate", value], ["gridTemplateAreas", null], ["gridTemplateColumns", null], ["gridTemplateRows", null]],
  inset: value => [["inset", value], ["insetInline", null], ["insetBlock", null], ["insetInlineStart", null], ["insetInlineEnd", null], ["top", null], ["right", null], ["bottom", null], ["left", null]],
  insetInline: value => [["insetInline", value], ["insetInlineStart", null], ["insetInlineEnd", null], ["left", null], ["right", null]],
  insetBlock: value => [["insetBlock", value], ["top", null], ["bottom", null]],
  insetInlineStart: value => [["insetInlineStart", value], ["left", null], ["right", null]],
  insetInlineEnd: value => [["insetInlineEnd", value], ["left", null], ["right", null]],
  left: value => [["left", value], ["insetInlineStart", null], ["insetInlineEnd", null]],
  right: value => [["right", value], ["insetInlineStart", null], ["insetInlineEnd", null]],
  listStyle: value => [["listStyle", value], ["listStyleImage", null], ["listStylePosition", null], ["listStyleType", null]],
  margin: value => {
    const values = typeof value === "number" ? [value] : (0, _splitCssValue.default)(value);
    if (values.length === 1) {
      return [["margin", values[0]], ["marginInlineStart", null], ["marginLeft", null], ["marginInlineEnd", null], ["marginRight", null], ["marginTop", null], ["marginBottom", null]];
    }
    const [top, right = top, bottom = top, left = right] = values;
    return [["marginTop", top], ["marginInlineEnd", right], ["marginBottom", bottom], ["marginInlineStart", left], ["marginLeft", null], ["marginRight", null]];
  },
  marginInline: value => [["marginInline", value], ["marginInlineStart", null], ["marginLeft", null], ["marginInlineEnd", null], ["marginRight", null]],
  marginBlock: value => [["marginBlock", value], ["marginTop", null], ["marginBottom", null]],
  marginInlineStart: value => [["marginInlineStart", value], ["marginLeft", null], ["marginRight", null]],
  marginInlineEnd: value => [["marginInlineEnd", value], ["marginLeft", null], ["marginRight", null]],
  marginLeft: value => [["marginLeft", value], ["marginInlineStart", null], ["marginInlineEnd", null]],
  marginRight: value => [["marginRight", value], ["marginInlineStart", null], ["marginInlineEnd", null]],
  mask: value => [["mask", value], ["maskClip", null], ["maskComposite", null], ["maskImage", null], ["maskMode", null], ["maskOrigin", null], ["maskPosition", null], ["maskRepeat", null], ["maskSize", null]],
  offset: value => [["offset", value], ["offsetAnchor", null], ["offsetDistance", null], ["offsetPath", null], ["offsetPosition", null], ["offsetRotate", null]],
  outline: value => [["outline", value], ["outlineColor", null], ["outlineStyle", null], ["outlineWidth", null]],
  overflow: value => [["overflow", value], ["overflowX", null], ["overflowY", null]],
  padding: rawValue => {
    const values = typeof rawValue === "number" ? [rawValue] : (0, _splitCssValue.default)(rawValue);
    if (values.length === 1) {
      return [["padding", values[0]], ["paddingStart", null], ["paddingLeft", null], ["paddingEnd", null], ["paddingRight", null], ["paddingTop", null], ["paddingBottom", null]];
    }
    const [top, right = top, bottom = top, left = right] = values;
    return [["paddingTop", top], ["paddingEnd", right], ["paddingBottom", bottom], ["paddingStart", left]];
  },
  paddingInline: rawValue => [["paddingInline", rawValue], ["paddingStart", null], ["paddingLeft", null], ["paddingEnd", null], ["paddingRight", null]],
  paddingBlock: rawValue => [["paddingBlock", rawValue], ["paddingTop", null], ["paddingBottom", null]],
  paddingInlineStart: value => [["paddingInlineStart", value], ["paddingLeft", null], ["paddingRight", null]],
  paddingInlineEnd: value => [["paddingInlineEnd", value], ["paddingLeft", null], ["paddingRight", null]],
  paddingLeft: value => [["paddingLeft", value], ["paddingInlineStart", null], ["paddingInlineEnd", null]],
  paddingRight: value => [["paddingRight", value], ["paddingInlineStart", null], ["paddingInlineEnd", null]],
  placeContent: value => [["placeContent", value], ["alignContent", null], ["justifyContent", null]],
  placeItems: value => [["placeItems", value], ["alignItems", null], ["justifyItems", null]],
  placeSelf: value => [["placeSelf", value], ["alignSelf", null], ["justifySelf", null]],
  scrollMargin: value => [["scrollMargin", value], ["scrollMarginBottom", null], ["scrollMarginLeft", null], ["scrollMarginStart", null], ["scrollMarginRight", null], ["scrollMarginEnd", null], ["scrollMarginTop", null]],
  scrollPadding: value => [["scrollPadding", value], ["scrollPaddingBottom", null], ["scrollPaddingLeft", null], ["scrollPaddingStart", null], ["scrollPaddingRight", null], ["scrollPaddingEnd", null], ["scrollPaddingTop", null]],
  scrollTimeline: value => [["scrollTimeline", value], ["scrollTimelineName", null], ["scrollTimelineAxis", null]],
  textDecoration: value => [["textDecoration", value], ["textDecorationColor", null], ["textDecorationLine", null], ["textDecorationStyle", null], ["textDecorationThickness", null]],
  textEmphasis: value => [["textEmphasis", value], ["textEmphasisColor", null], ["textEmphasisStyle", null]],
  transition: value => [["transition", value], ["transitionDelay", null], ["transitionDuration", null], ["transitionProperty", null], ["transitionTimingFunction", null]]
};
const aliases = {
  borderHorizontal: shorthands.borderInline,
  borderVertical: shorthands.borderBlock,
  borderBlockStart: shorthands.borderTop,
  borderEnd: shorthands.borderInlineEnd,
  borderBlockEnd: shorthands.borderBottom,
  borderStart: shorthands.borderInlineStart,
  blockSize: val => [["height", val]],
  inlineSize: val => [["width", val]],
  minBlockSize: val => [["minHeight", val]],
  minInlineSize: val => [["minWidth", val]],
  maxBlockSize: val => [["maxHeight", val]],
  maxInlineSize: val => [["maxWidth", val]],
  borderHorizontalWidth: shorthands.borderInlineWidth,
  borderHorizontalStyle: shorthands.borderInlineStyle,
  borderHorizontalColor: shorthands.borderInlineColor,
  borderVerticalWidth: shorthands.borderBlockWidth,
  borderVerticalStyle: shorthands.borderBlockStyle,
  borderVerticalColor: shorthands.borderBlockColor,
  borderBlockStartColor: value => [["borderTopColor", value]],
  borderBlockEndColor: value => [["borderBottomColor", value]],
  borderBlockStartStyle: value => [["borderTopStyle", value]],
  borderBlockEndStyle: value => [["borderBottomStyle", value]],
  borderBlockStartWidth: value => [["borderTopWidth", value]],
  borderBlockEndWidth: value => [["borderBottomWidth", value]],
  borderStartColor: shorthands.borderInlineStartColor,
  borderEndColor: shorthands.borderInlineEndColor,
  borderStartStyle: shorthands.borderInlineStartStyle,
  borderEndStyle: shorthands.borderInlineEndStyle,
  borderStartWidth: shorthands.borderInlineStartWidth,
  borderEndWidth: shorthands.borderInlineEndWidth,
  borderTopStartRadius: value => [["borderStartStartRadius", value]],
  borderTopEndRadius: value => [["borderStartEndRadius", value]],
  borderBottomStartRadius: value => [["borderEndStartRadius", value]],
  borderBottomEndRadius: value => [["borderEndEndRadius", value]],
  marginBlockStart: value => [["marginTop", value]],
  marginBlockEnd: value => [["marginBottom", value]],
  marginStart: shorthands.marginInlineStart,
  marginEnd: shorthands.marginInlineEnd,
  marginHorizontal: shorthands.marginInline,
  marginVertical: shorthands.marginBlock,
  paddingBlockStart: rawValue => [["paddingTop", rawValue]],
  paddingBlockEnd: rawValue => [["paddingBottom", rawValue]],
  paddingStart: shorthands.paddingInlineStart,
  paddingEnd: shorthands.paddingInlineEnd,
  paddingHorizontal: shorthands.paddingInline,
  paddingVertical: shorthands.paddingBlock,
  insetBlockStart: value => [["top", value]],
  insetBlockEnd: value => [["bottom", value]],
  start: shorthands.insetInlineStart,
  end: shorthands.insetInlineEnd
};
const expansions = {
  ...shorthands,
  ...aliases
};
var _default = expansions;
exports.default = _default;