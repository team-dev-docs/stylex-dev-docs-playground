"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateNamespace = validateNamespace;
var _stylexInclude = require("../stylex-include");
var messages = _interopRequireWildcard(require("../messages"));
var _objectUtils = require("../utils/object-utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function validateNamespace(namespace) {
  let conditions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  if (!(0, _objectUtils.isPlainObject)(namespace)) {
    throw new Error(messages.ILLEGAL_NAMESPACE_VALUE);
  }
  const ns = namespace;
  for (const key in ns) {
    const val = ns[key];
    if (val === null || typeof val === "string" || typeof val === "number") {
      continue;
    }
    if (Array.isArray(val)) {
      for (const v of val) {
        if (v === null || typeof v === "string" || typeof v === "number") {
          continue;
        }
        throw new Error(messages.ILLEGAL_PROP_ARRAY_VALUE);
      }
      continue;
    }
    if (val instanceof _stylexInclude.IncludedStyles) {
      if (conditions.length === 0) {
        continue;
      }
      throw new Error(messages.ONLY_TOP_LEVEL_INLCUDES);
    }
    if ((0, _objectUtils.isPlainObject)(val)) {
      if (key.startsWith("@") || key.startsWith(":")) {
        if (conditions.includes(key)) {
          throw new Error(messages.DUPLICATE_CONDITIONAL);
        }
        validateNamespace(val, [...conditions, key]);
      } else {
        validateConditionalStyles(val);
      }
      continue;
    }
    throw new Error(messages.ILLEGAL_PROP_VALUE);
  }
}
function validateConditionalStyles(val) {
  let conditions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  for (const key in val) {
    const v = val[key];
    if (!(key.startsWith("@") || key.startsWith(":") || key === "default")) {
      throw new Error(messages.INVALID_PSEUDO_OR_AT_RULE);
    }
    if (conditions.includes(key)) {
      throw new Error(messages.DUPLICATE_CONDITIONAL);
    }
    if (v === null || typeof v === "string" || typeof v === "number") {
      continue;
    }
    if (Array.isArray(v)) {
      for (const vv of v) {
        if (vv === null || typeof vv === "string" || typeof vv === "number") {
          continue;
        }
        throw new Error(messages.ILLEGAL_PROP_VALUE);
      }
      continue;
    }
    if (v instanceof _stylexInclude.IncludedStyles) {
      throw new Error(messages.ONLY_TOP_LEVEL_INLCUDES);
    }
    if ((0, _objectUtils.isPlainObject)(v)) {
      validateConditionalStyles(v, [...conditions, key]);
      continue;
    }
    throw new Error(messages.ILLEGAL_PROP_VALUE);
  }
}