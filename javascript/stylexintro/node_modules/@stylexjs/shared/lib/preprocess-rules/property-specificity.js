"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _splitCssValue = _interopRequireDefault(require("../utils/split-css-value"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const shorthands = {
  all: _ => {
    throw new Error("all is not supported");
  },
  animation: _value => {
    throw new Error("animation is not supported");
  },
  background: _value => {
    throw new Error("background is not supported. Use background-color, border-image etc. instead.");
  },
  border: _rawValue => {
    throw new Error("border is not supported. Use border-width, border-style and border-color instead.");
  },
  borderInline: _rawValue => {
    throw new Error("borderInline is not supported. Use borderInlineWidth, borderInlineStyle and borderInlineColor instead.");
  },
  borderBlock: _rawValue => {
    throw new Error("borderBlock is not supported. Use borderBlockWidth, borderBlockStyle and borderBlockColor instead.");
  },
  borderTop: _rawValue => {
    throw new Error("borderTop is not supported. Use borderTopWidth, borderTopStyle and borderTopColor instead.");
  },
  borderInlineEnd: _rawValue => {
    throw new Error("borderInlineEnd is not supported. Use borderInlineEndWidth, borderInlineEndStyle and borderInlineEndColor instead.");
  },
  borderRight: _rawValue => {
    throw new Error("borderRight is not supported. Use borderRightWidth, borderRightStyle and borderRightColor instead.");
  },
  borderBottom: _rawValue => {
    throw new Error("borderBottom is not supported. Use borderBottomWidth, borderBottomStyle and borderBottomColor instead.");
  },
  borderInlineStart: _rawValue => {
    throw new Error("borderInlineStart is not supported. Use borderInlineStartWidth, borderInlineStartStyle and borderInlineStartColor instead.");
  },
  borderLeft: _rawValue => {
    throw new Error(["`borderLeft` is not supported.", "You could use `borderLeftWidth`, `borderLeftStyle` and `borderLeftColor`,", "but it is preferable to use `borderInlineStartWidth`, `borderInlineStartStyle` and `borderInlineStartColor`."].join(" "));
  },
  margin: value => {
    const values = (0, _splitCssValue.default)(value);
    if (values.length === 1) {
      return [["margin", values[0]]];
    } else {
      throw new Error("margin shorthand with multiple values is not supported. Use marginTop, marginInlineEnd, marginBottom and marginInlineStart instead.");
    }
  },
  padding: rawValue => {
    const values = (0, _splitCssValue.default)(rawValue);
    if (values.length === 1) {
      return [["padding", values[0]]];
    }
    throw new Error("padding shorthand with multiple values is not supported. Use paddingTop, paddingInlineEnd, paddingBottom and paddingInlineStart instead.");
  }
};
const aliases = {
  borderHorizontal: shorthands.borderInline,
  borderVertical: shorthands.borderBlock,
  borderBlockStart: shorthands.borderTop,
  borderEnd: shorthands.borderInlineEnd,
  borderBlockEnd: shorthands.borderBottom,
  borderStart: shorthands.borderInlineStart,
  blockSize: val => [["height", val]],
  inlineSize: val => [["width", val]],
  minBlockSize: val => [["minHeight", val]],
  minInlineSize: val => [["minWidth", val]],
  maxBlockSize: val => [["maxHeight", val]],
  maxInlineSize: val => [["maxWidth", val]],
  borderHorizontalWidth: value => [["borderInlineWidth", value]],
  borderHorizontalStyle: value => [["borderInlineStyle", value]],
  borderHorizontalColor: value => [["borderInlineColor", value]],
  borderVerticalWidth: value => [["borderBlockWidth", value]],
  borderVerticalStyle: value => [["borderBlockStyle", value]],
  borderVerticalColor: value => [["borderBlockColor", value]],
  borderBlockStartColor: value => [["borderTopColor", value]],
  borderBlockEndColor: value => [["borderBottomColor", value]],
  borderBlockStartStyle: value => [["borderTopStyle", value]],
  borderBlockEndStyle: value => [["borderBottomStyle", value]],
  borderBlockStartWidth: value => [["borderTopWidth", value]],
  borderBlockEndWidth: value => [["borderBottomWidth", value]],
  borderStartColor: value => [["borderInlineStartColor", value]],
  borderEndColor: value => [["borderInlineEndColor", value]],
  borderStartStyle: value => [["borderInlineStartStyle", value]],
  borderEndStyle: value => [["borderInlineEndStyle", value]],
  borderStartWidth: value => [["borderInlineStartWidth", value]],
  borderEndWidth: value => [["borderInlineEndWidth", value]],
  borderTopStartRadius: value => [["borderStartStartRadius", value]],
  borderTopEndRadius: value => [["borderStartEndRadius", value]],
  borderBottomStartRadius: value => [["borderEndStartRadius", value]],
  borderBottomEndRadius: value => [["borderEndEndRadius", value]],
  marginBlockStart: value => [["marginTop", value]],
  marginBlockEnd: value => [["marginBottom", value]],
  marginStart: value => [["marginInlineStart", value]],
  marginEnd: value => [["marginInlineEnd", value]],
  marginHorizontal: value => [["marginInline", value]],
  marginVertical: value => [["marginBlock", value]],
  paddingBlockStart: rawValue => [["paddingTop", rawValue]],
  paddingBlockEnd: rawValue => [["paddingBottom", rawValue]],
  paddingStart: value => [["paddingInlineStart", value]],
  paddingEnd: value => [["paddingInlineEnd", value]],
  paddingHorizontal: value => [["paddingInline", value]],
  paddingVertical: value => [["paddingBlock", value]],
  insetBlockStart: value => [["top", value]],
  insetBlockEnd: value => [["bottom", value]],
  start: value => [["insetInlineStart", value]],
  end: value => [["insetInlineEnd", value]]
};
const expansions = {
  ...shorthands,
  ...aliases
};
var _default = expansions;
exports.default = _default;