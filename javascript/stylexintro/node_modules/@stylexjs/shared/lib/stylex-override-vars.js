"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = styleXOverrideVars;
var _hash = _interopRequireDefault(require("./hash"));
var _defaultOptions = require("./utils/default-options");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function styleXOverrideVars(themeVars, variables, options) {
  if (typeof themeVars.__themeName__ !== "string") {
    throw new Error("Can only override variables theme created with stylex.unstable_createVars().");
  }
  const {
    classNamePrefix
  } = {
    ..._defaultOptions.defaultOptions,
    ...options
  };
  const sortedKeys = Object.keys(variables).sort();
  const atRules = {};
  const cssVariablesOverrideString = sortedKeys.map(key => {
    const varNameHash = themeVars[key].slice(4, -1);
    const value = variables[key];
    if (varNameHash != null && value !== null && typeof value === "object") {
      if (value.default === undefined) {
        throw new Error("Default value is not defined for " + key + " variable.");
      }
      const definedVarString = `${varNameHash}:${value.default};`;
      Object.keys(value).forEach(key => {
        if (key.startsWith("@")) {
          const definedVarStringForAtRule = `${varNameHash}:${value[key]};`;
          if (atRules[key] == null) {
            atRules[key] = [definedVarStringForAtRule];
          } else {
            atRules[key].push(definedVarStringForAtRule);
          }
        }
      });
      return definedVarString;
    }
    return varNameHash != null && typeof value !== "object" ? `${varNameHash}:${value};` : "";
  }).join("");
  const sortedAtRules = Object.keys(atRules).sort();
  const atRulesStringForHash = sortedAtRules.map(atRule => {
    return `${atRule}{${atRules[atRule].sort().join("")}}`;
  }).join("");
  const overrideClassName = classNamePrefix + (0, _hash.default)(cssVariablesOverrideString + atRulesStringForHash);
  const atRulesCss = sortedAtRules.map(atRule => {
    return `${atRule}{.${overrideClassName}{${atRules[atRule].join("")}}}`;
  }).join("");
  return [{
    $$css: true,
    [themeVars.__themeName__]: overrideClassName
  }, {
    [overrideClassName]: {
      ltr: `.${overrideClassName}{${cssVariablesOverrideString}}${atRulesCss}`,
      priority: 0.99,
      rtl: undefined
    }
  }];
}