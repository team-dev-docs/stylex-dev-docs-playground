"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.url = exports.transformList = exports.transformFunction = exports.time = exports.resolution = exports.percentage = exports.number = exports.lengthPercentage = exports.length = exports.integer = exports.image = exports.color = exports.angle = exports.Url = exports.TransformList = exports.TransformFunction = exports.Time = exports.Resolution = exports.Percentage = exports.Num = exports.LengthPercentage = exports.Length = exports.Integer = exports.Image = exports.Color = exports.CSSType = exports.Angle = void 0;
class CSSType {}
exports.CSSType = CSSType;
class Angle extends CSSType {
  syntax = "<angle>";
  static syntax = "<angle>";
  constructor(value) {
    super();
    this.value = value;
  }
  static create(value) {
    return new Angle(value);
  }
}
exports.Angle = Angle;
const angle = Angle.create;
exports.angle = angle;
class Color extends CSSType {
  syntax = "<color>";
  constructor(value) {
    super();
    this.value = value;
  }
  static create(value) {
    return new Color(value);
  }
}
exports.Color = Color;
const color = Color.create;
exports.color = color;
class Url extends CSSType {
  syntax = "<url>";
  constructor(value) {
    super();
    this.value = value;
  }
  static create(value) {
    return new Url(value);
  }
}
exports.Url = Url;
const url = Url.create;
exports.url = url;
class Image extends Url {
  syntax = "<image>";
  constructor(value) {
    super(value);
    this.value = value;
  }
  static create(value) {
    return new Image(value);
  }
}
exports.Image = Image;
const image = Image.create;
exports.image = image;
class Integer extends CSSType {
  syntax = "<integer>";
  constructor(value) {
    super();
    this.value = value;
  }
  static create(value) {
    return new Integer(value);
  }
}
exports.Integer = Integer;
const integer = Integer.create;
exports.integer = integer;
class LengthPercentage extends CSSType {
  syntax = "<length-percentage>";
  constructor(value) {
    super();
    this.value = value;
  }
  static createLength(value) {
    return new LengthPercentage(convertNumberToLength(value));
  }
  static createPercentage(value) {
    return new LengthPercentage(convertNumberToPercentage(value));
  }
}
exports.LengthPercentage = LengthPercentage;
const lengthPercentage = LengthPercentage.createLength;
exports.lengthPercentage = lengthPercentage;
class Length extends LengthPercentage {
  syntax = "<length>";
  constructor(value) {
    super(convertNumberToLength(value));
  }
  static create(value) {
    return new Length(value);
  }
}
exports.Length = Length;
const length = Length.create;
exports.length = length;
class Percentage extends LengthPercentage {
  syntax = "<percentage>";
  constructor(value) {
    super(convertNumberToPercentage(value));
  }
  static create(value) {
    return new Percentage(value);
  }
}
exports.Percentage = Percentage;
const percentage = Percentage.create;
exports.percentage = percentage;
class Num extends CSSType {
  syntax = "<number>";
  constructor(value) {
    super();
    this.value = value;
  }
  static create(value) {
    return new Num(value);
  }
}
exports.Num = Num;
const number = Num.create;
exports.number = number;
class Resolution extends CSSType {
  syntax = "<resolution>";
  constructor(value) {
    super();
    this.value = value;
  }
  static create(value) {
    return new Resolution(value);
  }
}
exports.Resolution = Resolution;
const resolution = Resolution.create;
exports.resolution = resolution;
class Time extends CSSType {
  syntax = "<time>";
  constructor(value) {
    super();
    this.value = value;
  }
  static create(value) {
    return new Time(value);
  }
}
exports.Time = Time;
const time = Time.create;
exports.time = time;
class TransformFunction extends CSSType {
  syntax = "<transform-function>";
  constructor(value) {
    super();
    this.value = value;
  }
  static create(value) {
    return new TransformFunction(value);
  }
}
exports.TransformFunction = TransformFunction;
const transformFunction = TransformFunction.create;
exports.transformFunction = transformFunction;
class TransformList extends CSSType {
  syntax = "<transform-list>";
  constructor(value) {
    super();
    this.value = value;
  }
  static create(value) {
    return new TransformList(value);
  }
}
exports.TransformList = TransformList;
const transformList = TransformList.create;
exports.transformList = transformList;
const convertNumberToStringUsing = (transformNumber, defaultStr) => value => {
  if (typeof value === "number") {
    return transformNumber(value);
  }
  if (typeof value === "string") {
    return value;
  }
  if (typeof value === "object") {
    const {
      default: defaultValue,
      ...rest
    } = value;
    const defaultResult = convertNumberToLength(defaultValue);
    const result = {
      default: typeof defaultResult === "string" ? defaultResult : defaultStr
    };
    for (const [key, value] of Object.entries(rest)) {
      result[key] = convertNumberToLength(value);
    }
    return result;
  }
  return value;
};
const convertNumberToLength = convertNumberToStringUsing(value => value === 0 ? "0" : `${value}px`, "0px");
const convertNumberToPercentage = convertNumberToStringUsing(value => value === 0 ? "0" : `${value * 100}%`, "0");