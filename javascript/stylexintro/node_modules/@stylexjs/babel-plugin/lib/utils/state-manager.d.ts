/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

import type { PluginPass } from '@babel/core';
import type { NodePath } from '@babel/traverse';
import type {
  CompiledNamespaces,
  StyleXOptions as RuntimeOptions,
} from '@stylexjs/shared';
export type ImportPathResolution =
  | false
  | ['themeNameRef' | 'filePath', string];
type ModuleResolution =
  | { type: 'commonJS'; rootDir: string; themeFileExtension?: string }
  | { type: 'haste'; themeFileExtension?: string }
  | {
      type: 'experimental_crossFileParsing';
      rootDir: string;
      themeFileExtension?: string;
    };
type StyleXOptions = Omit<
  RuntimeOptions,
  keyof ({
    importSources: Array<string>;
    genConditionalClasses: boolean;
    unstable_moduleResolution: void | ModuleResolution;
  })
> & {
  importSources: Array<string>;
  genConditionalClasses: boolean;
  unstable_moduleResolution: void | ModuleResolution;
};
declare class StateManager {
  readonly _state: PluginPass;
  readonly stylexImport: Set<string>;
  readonly stylexCreateImport: Set<string>;
  readonly stylexIncludeImport: Set<string>;
  readonly stylexFirstThatWorksImport: Set<string>;
  readonly stylexKeyframesImport: Set<string>;
  readonly stylexCreateVarsImport: Set<string>;
  readonly stylexOverrideVarsImport: Set<string>;
  readonly stylexTypesImport: Set<string>;
  readonly styleMap: Map<string, CompiledNamespaces>;
  readonly styleVars: Map<string, NodePath>;
  readonly styleVarsToKeep: Set<[string, null | string]>;
  inStyleXCreate: boolean;
  constructor(state: PluginPass);
  get options(): StyleXOptions;
  get canReferenceTheme(): boolean;
  get metadata(): { [key: string]: any };
  get stylexSheetName(): string | void;
  get isDev(): boolean;
  get isTest(): boolean;
  get filename(): string | void;
  get cssVars(): any;
  get fileNameForHashing(): null | string;
  importPathResolver(importPath: string): ImportPathResolution;
  addStyle(style: [string, { ltr: string; rtl?: string | null }, number]): void;
  markComposedNamespace(memberExpression: [string, null | string]): void;
}
export default StateManager;
