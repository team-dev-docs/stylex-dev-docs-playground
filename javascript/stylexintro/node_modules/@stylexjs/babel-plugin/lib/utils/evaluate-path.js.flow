/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import type { NodePath } from '../../flow_modules/@babel/traverse';
import StateManager from './state-manager';
export type FunctionConfig = {
  identifiers: {
    [fnName: string]: {
      fn: (...args: any[]) => any,
      takesPath?: boolean,
    },
  },
  memberExpressions: {
    [key: string]: {
      [memberName: string]: {
        fn: (...args: any[]) => any,
        takesPath?: boolean,
      },
    },
  },
};

/**
 * Walk the input `node` and statically evaluate it.
 *
 * Returns an object in the form `{ confident, value, deopt }`. `confident`
 * indicates whether or not we had to drop out of evaluating the expression
 * because of hitting an unknown node that we couldn't confidently find the
 * value of, in which case `deopt` is the path of said node.
 *
 * Example:
 *
 *   evaluate(parse("5 + 5")) // { confident: true, value: 10 }
 *   evaluate(parse("!true")) // { confident: true, value: false }
 *   evaluate(parse("foo + foo")) // { confident: false, value: undefined, deopt: NodePath }
 *
 */

declare export function evaluate(
  path: NodePath<>,
  traversalState: StateManager,
  functions: FunctionConfig,
): $ReadOnly<{
  confident: boolean,
  value: any,
  deopt?: null | NodePath<>,
}>;
