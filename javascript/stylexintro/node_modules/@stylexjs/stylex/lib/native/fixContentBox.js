"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixContentBox = fixContentBox;
var _errorMsg = require("./errorMsg");
const TOP = 0;
const RIGHT = 1;
const BOTTOM = 2;
const LEFT = 3;
const START = LEFT;
const END = RIGHT;
const borderMapping = [["borderWidth", [TOP, RIGHT, BOTTOM, LEFT]], ["borderTopWidth", [TOP]], ["borderRightWidth", [RIGHT]], ["borderBottomWidth", [BOTTOM]], ["borderLeftWidth", [LEFT]], ["borderStartWidth", [START]], ["borderEndWidth", [END]]];
const paddingMapping = [["padding", [TOP, RIGHT, BOTTOM, LEFT]], ["paddingVertical", [TOP, BOTTOM]], ["paddingHorizontal", [LEFT, RIGHT]], ["paddingTop", [TOP]], ["paddingRight", [RIGHT]], ["paddingBottom", [BOTTOM]], ["paddingLeft", [LEFT]], ["paddingStart", [START]], ["paddingEnd", [END]]];
function fixContentBox(flatStyle) {
  const border = [0, 0, 0, 0];
  const padding = [0, 0, 0, 0];
  for (const [styleProp, directions] of borderMapping) {
    if (typeof flatStyle[styleProp] === "number") {
      for (const direction of directions) {
        border[direction] = flatStyle[styleProp];
      }
    }
  }
  for (const [styleProp, directions] of paddingMapping) {
    if (typeof flatStyle[styleProp] === "number") {
      for (const direction of directions) {
        padding[direction] = flatStyle[styleProp];
      }
    }
  }
  const correctionVertical = border[TOP] + padding[TOP] + padding[BOTTOM] + border[BOTTOM];
  const correctionHorizontal = border[LEFT] + padding[LEFT] + padding[RIGHT] + border[RIGHT];
  const correctionMapping = new Map([["width", correctionHorizontal], ["minWidth", correctionHorizontal], ["maxWidth", correctionHorizontal], ["height", correctionVertical], ["minHeight", correctionVertical], ["maxHeight", correctionVertical]]);
  const nextStyle = {};
  for (const styleProp of Object.keys(flatStyle)) {
    const correction = correctionMapping.get(styleProp);
    const styleValue = flatStyle[styleProp];
    if (correction != null) {
      if (styleValue == null) {
        nextStyle[styleProp] = null;
        continue;
      }
      if (styleValue === "auto") {
        nextStyle[styleProp] = styleValue;
        continue;
      }
      if (typeof styleValue !== "number") {
        (0, _errorMsg.warnMsg)(`"boxSizing:'content-box'" does not support value "${String(styleValue)}" for property "${styleProp}". Expected a value that resolves to a number. Percentage values can only be used with "boxSizing:'border-box'".`);
        return flatStyle;
      }
      nextStyle[styleProp] = styleValue + correction;
    } else {
      nextStyle[styleProp] = styleValue;
    }
  }
  return nextStyle;
}