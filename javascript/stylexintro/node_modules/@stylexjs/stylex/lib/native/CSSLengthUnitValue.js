"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CSSLengthUnitValue = void 0;
const LENGTH_REGEX = /^([0-9]*[.]?[0-9]+)(em|px|rem|vh|vmax|vmin|vw)$/;
class CSSLengthUnitValue {
  static parse(inp) {
    const match = inp.match(LENGTH_REGEX);
    if (match == null) {
      return null;
    }
    const [, value, unit] = match;
    const parsedValue = parseFloat(value);
    return [parsedValue, unit];
  }
  constructor(value, unit) {
    this.value = value;
    this.unit = unit;
  }
  resolvePixelValue(options) {
    const {
      viewportWidth,
      viewportHeight,
      fontScale = 1,
      inheritedFontSize
    } = options;
    const unit = this.unit;
    const value = this.value;
    const valuePercent = value / 100;
    switch (unit) {
      case "em":
        {
          if (inheritedFontSize == null) {
            return fontScale * 16 * value;
          } else {
            return inheritedFontSize * value;
          }
        }
      case "px":
        {
          return value;
        }
      case "rem":
        {
          return fontScale * 16 * value;
        }
      case "vh":
        {
          return viewportHeight * valuePercent;
        }
      case "vmin":
        {
          return Math.min(viewportWidth, viewportHeight) * valuePercent;
        }
      case "vmax":
        {
          return Math.max(viewportWidth, viewportHeight) * valuePercent;
        }
      case "vw":
        {
          return viewportWidth * valuePercent;
        }
      default:
        {
          console.error(`[stylex]: Unsupported unit of "${unit}"`);
          return 0;
        }
    }
  }
}
exports.CSSLengthUnitValue = CSSLengthUnitValue;