/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

import type {
  Keyframes,
  Stylex$Create,
  StyleX$CreateVars,
  StyleX$OverrideVars,
  StyleXArray,
  MapNamespace,
  CompiledStyles,
} from './StyleXTypes';
export type { Theme, Variant } from './StyleXTypes';
import injectStyle from './stylex-inject';
export declare function spread(
  styles: StyleXArray<
    | (null | undefined | CompiledStyles)
    | boolean
    | Readonly<{ $$css?: void; [$$Key$$: string]: string | number }>
  >,
  _options?: {},
): Readonly<{
  className: string;
  style: Readonly<{ $$css?: void; [$$Key$$: string]: string | number }>;
}>;
type Stylex$Include = <
  TStyles extends { readonly [$$Key$$: string]: string | number },
>(
  _styles: MapNamespace<TStyles>,
) => TStyles;
export declare const create: Stylex$Create;
export declare const unstable_createVars: StyleX$CreateVars;
export declare const unstable_overrideVars: StyleX$OverrideVars;
export declare const include: Stylex$Include;
type ValueWithDefault<T> =
  | T
  | Readonly<{
      readonly default: T;
      readonly [$$Key$$: string]: ValueWithDefault<T>;
    }>;
type CSSSyntax =
  | '*'
  | '<length>'
  | '<number>'
  | '<percentage>'
  | '<length-percentage>'
  | '<color>'
  | '<image>'
  | '<url>'
  | '<integer>'
  | '<angle>'
  | '<time>'
  | '<resolution>'
  | '<transform-function>'
  | '<custom-ident>'
  | '<transform-list>';
type CSSSyntaxType = CSSSyntax | ReadonlyArray<CSSSyntax>;
interface ICSSType<T extends string | number> {
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
}
export declare const types: {
  angle: <T extends number | string>(_v: ValueWithDefault<T>) => ICSSType<T>;
  color: <T extends number | string>(_v: ValueWithDefault<T>) => ICSSType<T>;
  url: <T extends number | string>(_v: ValueWithDefault<T>) => ICSSType<T>;
  image: <T extends number | string>(_v: ValueWithDefault<T>) => ICSSType<T>;
  integer: <T extends number | string>(_v: ValueWithDefault<T>) => ICSSType<T>;
  lengthPercentage: <T extends number | string>(
    _v: ValueWithDefault<T>,
  ) => ICSSType<T>;
  length: <T extends number | string>(_v: ValueWithDefault<T>) => ICSSType<T>;
  percentage: <T extends number | string>(
    _v: ValueWithDefault<T>,
  ) => ICSSType<T>;
  number: <T extends number | string>(_v: ValueWithDefault<T>) => ICSSType<T>;
  resolution: <T extends number | string>(
    _v: ValueWithDefault<T>,
  ) => ICSSType<T>;
  time: <T extends number | string>(_v: ValueWithDefault<T>) => ICSSType<T>;
  transformFunction: <T extends number | string>(
    _v: ValueWithDefault<T>,
  ) => ICSSType<T>;
  transformList: <T extends number | string>(
    _v: ValueWithDefault<T>,
  ) => ICSSType<T>;
};
export declare const keyframes: (_keyframes: Keyframes) => string;
export declare const firstThatWorks: <T extends string | number>(
  ..._styles: ReadonlyArray<T>
) => ReadonlyArray<T>;
export declare const inject: typeof injectStyle;
export declare const UNSUPPORTED_PROPERTY: <T>(_props: T) => T;
type IStyleX = {
  (
    ...styles: ReadonlyArray<
      StyleXArray<(null | undefined | CompiledStyles) | boolean>
    >
  ): string;
  spread: (
    styles: StyleXArray<
      | (null | undefined | CompiledStyles)
      | boolean
      | Readonly<{ $$css?: void; [$$Key$$: string]: string | number }>
    >,
    _options?: {},
  ) => Readonly<{
    className: string;
    style: Readonly<{ $$css?: void; [$$Key$$: string]: string | number }>;
  }>;
  create: Stylex$Create;
  unstable_createVars: StyleX$CreateVars;
  unstable_overrideVars: StyleX$OverrideVars;
  include: Stylex$Include;
  types: typeof types;
  firstThatWorks: <T extends string | number>(
    ...v: ReadonlyArray<T>
  ) => ReadonlyArray<T>;
  inject: (
    ltrRule: string,
    priority: number,
    rtlRule: null | undefined | string,
  ) => void;
  keyframes: (keyframes: Keyframes) => string;
  UNSUPPORTED_PROPERTY: <T>(props: T) => T;
};
export declare const stylex: IStyleX;
declare const $$EXPORT_DEFAULT_DECLARATION$$: IStyleX;
export default $$EXPORT_DEFAULT_DECLARATION$$;
