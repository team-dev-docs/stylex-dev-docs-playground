/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import type {
  Keyframes,
  Stylex$Create,
  StyleX$CreateVars,
  StyleX$OverrideVars,
  StyleXArray,
  MapNamespace,
  CompiledStyles,
} from './StyleXTypes';

export type { Theme, Variant } from './StyleXTypes';

import injectStyle from './stylex-inject';
declare export function spread(
  styles: StyleXArray<
    | ?CompiledStyles
    | boolean
    | $ReadOnly<{ $$css?: void, [string]: string | number }>,
  >,
  _options?: { ... },
): $ReadOnly<{
  className: string,
  style: $ReadOnly<{ $$css?: void, [string]: string | number }>,
}>;

type Stylex$Include = <TStyles: { +[string]: string | number }>(
  _styles: MapNamespace<TStyles>,
) => TStyles;

declare export const create: Stylex$Create;

declare export const unstable_createVars: StyleX$CreateVars;

declare export const unstable_overrideVars: StyleX$OverrideVars;

declare export const include: Stylex$Include;

type ValueWithDefault<+T> =
  | T
  | $ReadOnly<{
      +default: T,
      +[string]: ValueWithDefault<T>,
    }>;

type CSSSyntax =
  | '*'
  | '<length>'
  | '<number>'
  | '<percentage>'
  | '<length-percentage>'
  | '<color>'
  | '<image>'
  | '<url>'
  | '<integer>'
  | '<angle>'
  | '<time>'
  | '<resolution>'
  | '<transform-function>'
  | '<custom-ident>'
  | '<transform-list>';

type CSSSyntaxType = CSSSyntax | $ReadOnlyArray<CSSSyntax>;

interface ICSSType<+T: string | number> {
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
}

declare export const types: {
  angle: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  color: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  url: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  image: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  integer: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  lengthPercentage: <T: number | string>(
    _v: ValueWithDefault<T>,
  ) => ICSSType<T>,
  length: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  percentage: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  number: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  resolution: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  time: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
  transformFunction: <T: number | string>(
    _v: ValueWithDefault<T>,
  ) => ICSSType<T>,
  transformList: <T: number | string>(_v: ValueWithDefault<T>) => ICSSType<T>,
};
declare export const keyframes: (_keyframes: Keyframes) => string;

declare export const firstThatWorks: <T: string | number>(
  ..._styles: $ReadOnlyArray<T>
) => $ReadOnlyArray<T>;

declare export const inject: typeof injectStyle;

declare export const UNSUPPORTED_PROPERTY: <T>(_props: T) => T;

type IStyleX = {
  (...styles: $ReadOnlyArray<StyleXArray<?CompiledStyles | boolean>>): string,
  spread: (
    styles: StyleXArray<
      | ?CompiledStyles
      | boolean
      | $ReadOnly<{ $$css?: void, [string]: string | number }>,
    >,
    _options?: { ... },
  ) => $ReadOnly<{
    className: string,
    style: $ReadOnly<{ $$css?: void, [string]: string | number }>,
  }>,
  create: Stylex$Create,
  unstable_createVars: StyleX$CreateVars,
  unstable_overrideVars: StyleX$OverrideVars,
  include: Stylex$Include,
  types: typeof types,
  firstThatWorks: <T: string | number>(
    ...v: $ReadOnlyArray<T>
  ) => $ReadOnlyArray<T>,
  inject: (ltrRule: string, priority: number, rtlRule: ?string) => void,
  keyframes: (keyframes: Keyframes) => string,
  UNSUPPORTED_PROPERTY: <T>(props: T) => T,
  ...
};

declare export const stylex: IStyleX;
declare export default IStyleX;
