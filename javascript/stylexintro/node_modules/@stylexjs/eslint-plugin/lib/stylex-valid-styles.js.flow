/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import type { Expression, Pattern, Property } from '../flow_modules/estree';
import { Rule } from '../flow_modules/eslint';
export type Variables = $ReadOnlyMap<string, Expression>;
export type RuleCheck = (
  node: $ReadOnly<Expression | Pattern>,
  variables?: $ReadOnly<Variables>,
  prop?: $ReadOnly<Property>,
) => RuleResponse;
export type RuleResponse = void | {
  message: string,
  distance?: number,
  suggest?: {
    fix: Rule.ReportFixer,
    desc: string,
  },
};

// Maybe add this later.
// const pseudoAllowlist = new Set([]);

declare const stylexValidStyles: {
  meta: {
    type: 'problem',
    hasSuggestions: true,
    docs: {
      descriptions: 'Enforce that you create valid stylex styles',
      category: 'Possible Errors',
      recommended: true,
    },
    schema: $FlowFixMe,
  },
  create(context: Rule.RuleContext): { ... },
};
declare export default typeof stylexValidStyles;
/* eslint-enable object-shorthand */
